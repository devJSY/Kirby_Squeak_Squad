#include "syApplication.h"
#include "syInput.h"
#include "syTime.h"
#include "sySceneManager.h"
#include "resource.h"	// LoadMenu()
#include "syCamera.h"

namespace sy
{
	HWND		Application::mHwnd		 = NULL;
	HDC			Application::mHdc		 = NULL;
	POINT		Application::mResolution = POINT{};

	HDC			Application::mBackHdc	 = NULL;
	HBITMAP		Application::mBackBuffer = NULL;
	HMENU		Application::mhMenu	 = LoadMenu(nullptr, MAKEINTRESOURCEW(IDC_CLIENT)); // 메뉴바 생성

	Application::Application()
	{
	}

	void Application::Release()
	{
		// 매니저 클래스들은 객체가 생성이 되지않기 때문에 소멸자가 호출되지않음 해제 함수를 따로 만들어서 처리해야함
		// 
		// 윈도우핸들, DC 삭제
		ReleaseDC(mHwnd, mHdc);

		DeleteDC(mBackHdc);
		DeleteObject(mBackBuffer);

		DestroyMenu(mhMenu);
	}

	void Application::Initialize(HWND hwnd, POINT Resolution)
	{
		mHwnd = hwnd;
		mHdc = GetDC(mHwnd);
		// 윈도우 크기 지정
		mResolution = Resolution;

		// 해상도에 맞게 윈도우 크기 조정
		ChangeWindowSize(mResolution, false);

		// 메뉴바 디폴트 off
		DividMenu();

		// 윈도우 해상도와 동일한 비트맵 생성
		mBackBuffer = CreateCompatibleBitmap(mHdc, mResolution.x, mResolution.y);

		// 새로 생성한 비트맵을 가리키는 DC 생성
		mBackHdc = CreateCompatibleDC(mHdc);

		// 새로 생성한 비트맵과 DC를 서로 연결
		HBITMAP defaultBitmap =
			(HBITMAP)SelectObject(mBackHdc, mBackBuffer);

		// mBackHdc 의 기본 비트맵 삭제
		DeleteObject(defaultBitmap);

		Time::Initialize();
		Input::Initialize();
		Camera::Initalize();

		SceneManager::Initialize();		
	}

	void Application::Run()
	{
		Update();
		Render();
	}

	void Application::Update()
	{
		Time::Update();
		Input::Update();		
		Camera::Update();

		SceneManager::Update();
	}

	void Application::Render()
	{
		// 테두리 제거용 1증감
		Rectangle(mBackHdc, -1, -1, mResolution.x + 1, mResolution.y + 1);

		Time::Render(mBackHdc);
		SceneManager::Render(mBackHdc);		

		// 화면 비율 맞추기
		SetWindowRatio();

		// Back 버퍼 비트맵을 Front 버퍼 윈도우에 덮어씌운다
		BitBlt(mHdc, 0, 0, mResolution.x, mResolution.y,
			mBackHdc, 0, 0, SRCCOPY);
	}

	void Application::DockMenu()
	{
		SetMenu(mHwnd, mhMenu); // 메뉴바 On
		ChangeWindowSize(mResolution, true);
	}

	void Application::DividMenu()
	{
		SetMenu(mHwnd, nullptr); // 메뉴바 Off
		ChangeWindowSize(mResolution, false);
	}

	void Application::ChangeWindowSize(POINT Resolution, bool bMenu)
	{
		RECT rect = { 0, 0, Resolution.x, Resolution.y};
		AdjustWindowRect(&rect, WS_OVERLAPPEDWINDOW, bMenu);
		SetWindowPos(mHwnd, nullptr, 100, 100, rect.right - rect.left, rect.bottom - rect.top, 0);
	}

	void Application::SetWindowRatio()
	{
		RECT rect;
		SetMapMode(mHdc, MM_ISOTROPIC); // MM_ISOTROPIC 원본 그림이 비율에 따다 모양 변화가 없이 사용자정의(가로세로 동일)
										// 논리적인 출력좌표를 뷰포트로 변환하는 방식 설정
		GetClientRect(mHwnd, &rect);
		SetViewportOrgEx(mHdc, rect.right / 2 - ((rect.bottom / mResolution.y * mResolution.x) / 2), 0, NULL); // 뷰포트의 원점설정 (1920기준 대략 600)
		SetWindowExtEx(mHdc, mResolution.x, mResolution.y, NULL); // 논리적 좌표 설정
		SetViewportExtEx(mHdc, rect.right, rect.bottom, NULL);  // 뷰포트 크기 설정
	}
}
